name: Main

on:
  - push

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux/amd64'
            runner: 'ubuntu-24.04'
            python-version: '3.10'

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-os:${{ matrix.runner }}-python:${{ matrix.python-version }}-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements.txt') }}

      - name: Install Python Dependencies
        shell: bash
        run: pip3 install -r requirements.txt -r requirements-dev.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare ENV
        shell: bash
        run: |
          platform=${{ matrix.platform }}
          registry=${{ env.REGISTRY }}
          base_image_name=${{ env.BASE_IMAGE_NAME }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${registry}/${base_image_name}" >> $GITHUB_ENV

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.FULL_IMAGE_NAME }}

      - name: Build
        id: build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.FULL_IMAGE_NAME }}
          push: false
          outputs: |
            type=docker

      - name: Verify Test Data
        shell: bash
        run: scripts/verify-test-data.py --image-name ${{ steps.build.outputs.imageid }} || cat /tmp/edq-lms-server-output*

  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux/amd64'
            runner: 'ubuntu-24.04'
            python-version: '3.10'
          - platform: 'linux/arm64'
            runner: 'ubuntu-24.04-arm'
            python-version: '3.10'

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare ENV
        shell: bash
        run: |
          platform=${{ matrix.platform }}
          registry=${{ env.REGISTRY }}
          base_image_name=${{ env.BASE_IMAGE_NAME }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${registry}/${base_image_name}" >> $GITHUB_ENV

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.FULL_IMAGE_NAME }}

      - name: Build and Push to Digest
        id: build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.FULL_IMAGE_NAME }}
          push: false
          outputs: |
            type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export Digest
        shell: bash
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload Digest
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-24.04
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: build

    steps:
      - name: Prepare ENV
        shell: bash
        run: |
          registry=${{ env.REGISTRY }}
          base_image_name=${{ env.BASE_IMAGE_NAME }}
          echo "FULL_IMAGE_NAME=${registry}/${base_image_name}" >> $GITHUB_ENV

      - name: Download Digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Craete Docker Metadata
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.FULL_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create Unified Manifest and Push
        shell: bash
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.FULL_IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect Image
        shell: bash
        run: |
          docker buildx imagetools inspect ${{ env.FULL_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
